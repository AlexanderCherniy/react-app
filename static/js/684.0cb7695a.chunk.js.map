{"version":3,"file":"static/js/684.0cb7695a.chunk.js","mappings":"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","sources":["../node_modules/antd/es/col/index.js","noc/hoc.tsx","redux/profile-reselects.ts","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/PostsForm.tsx","components/Profile/Posts/Posts.tsx","webpack://react-first/./src/components/Profile/Profile.module.scss?4008","components/Profile/ProfileInfo/ProfileContacts/ProfileContactsHelper.tsx","components/Profile/ProfileInfo/ProfileContacts/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusContainer.tsx","components/Profile/ProfileInfo/ProfileContacts/ProfileContactsForm.tsx","components/Profile/ProfileInfo/ProfileInfoHelper.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","WithRouter.tsx","components/Profile/ProfileContainer.tsx","validate/validate.ts","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js"],"sourcesContent":["import { Col } from '../grid';\nexport default Col;","import React, { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { AppState } from '../redux/store-redux'\r\nimport { JSXElementConstructor } from 'react'\r\n\r\ntype HOCProps = {\r\n    isMyProfile: boolean\r\n    isAuth:boolean\r\n}\r\nconst AnonimGoLogin = (WrappedComponent:ComponentType<any>)=>{\r\n    const mapAnonimStateToProps = (state:AppState)=>{\r\n        return{\r\n            isAuth: state.auth.isAuth\r\n        } \r\n    }\r\n    const HOC = (props:HOCProps)=>{\r\n        if(!props.isAuth) return <Navigate to='/selectionPage'/>\r\n        return <WrappedComponent {...props}/>\r\n    }\r\n    return connect(mapAnonimStateToProps)(HOC)\r\n}\r\nexport default AnonimGoLogin","import { createSelector } from \"reselect\"\r\nimport { AppState } from \"./store-redux\"\r\n\r\nexport const getMyUserProfileSelector = (state:AppState)=>{\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getMyUserProfile = createSelector(getMyUserProfileSelector, (myProfile)=>{\r\n    return myProfile\r\n})","import './Post.scss';\r\ntype Props = {\r\n  img: string\r\n  comment: string\r\n}\r\nlet Post:React.FC<Props> = (props)=>{\r\n    return(\r\n      <div className= 'post'>\r\n          <div className='post__avatar'> <img src={props.img} alt=\"avatar\" /> </div>\r\n          <div className='post__comment'>{props.comment}</div>\r\n      </div>\r\n    )\r\n}\r\nexport default Post","import incClass from './Posts.module.scss';\r\nimport React from \"react\";\r\nimport { validatePost } from '../../../validate/validate';\r\nimport { Form, Formik } from \"formik\"\r\nimport { createField, Textarea } from '../../../Forms/Forms';\r\nconst noPhoto =\r\n    'https://images.theconversation.com/files/449089/original/file-20220301-25-ckck4y.jpeg?ixlib=rb-1.1.0&q=45&auto=format&w=1200&h=1200.0&fit=crop'\r\ntype Props = {\r\n    userData: UserData\r\n    changeNewPost: (text: string) => void\r\n    addPosts: (avatar: string) => void\r\n}\r\nexport type UserData = {\r\n    captcha: string | null\r\n    email: string | null\r\n    error: string | null | boolean\r\n    id: number | null\r\n    isAuth: boolean\r\n    login: string | null\r\n    photo: string | null\r\n}\r\nconst initialValues = {\r\n    newPost: ''\r\n}\r\ntype initialValuesType = typeof initialValues\r\ntype initialValuesKeysType = keyof initialValuesType\r\nconst PostsForm: React.FC<Props> = (props) => {\r\n    \r\n    return <Formik initialValues={initialValues}\r\n        validate={validatePost}\r\n        onSubmit={values => {\r\n            props.changeNewPost(values.newPost)\r\n            props.addPosts(props.userData.photo === null ? noPhoto : props.userData.photo)\r\n            values.newPost = ''\r\n        }}\r\n    >\r\n        <Form >\r\n            {createField<initialValuesKeysType>(incClass.PostInputForm, \"newPost\", Textarea, \"Your comment...\",)}\r\n            <button type='submit' className={incClass.sendButton}>Send</button>\r\n        </Form>\r\n    </Formik>\r\n}\r\nexport default PostsForm","import React from \"react\";\r\nimport Post from './Post/Post';\r\nimport incClass from './Posts.module.scss';\r\nimport PostsForm from './PostsForm';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { actions, PostType } from '../../../redux/profile-reducer'\r\nimport { AppState } from \"../../../redux/store-redux\";\r\n\r\nconst Posts:React.FC = (props) => {\r\n  const post = useSelector((state:AppState)=>state.profilePage.post) \r\n  const userData = useSelector((state:AppState)=>state.auth)  \r\n  const dispatch = useDispatch()\r\n  const changeNewPost = (text: string) => dispatch(actions.changePostsCreateAction(text))\r\n  const addPosts= (avatar: string) => dispatch(actions.addPostsCreateAction(avatar))\r\n  const deletePosts= async () => {\r\n      await dispatch(actions.deletePosts())\r\n      dispatch(actions.checkPosts())\r\n  }\r\n\r\n  localStorage.setItem(\"posts\",JSON.stringify(post))\r\n\r\n  return (\r\n    <div className={incClass.posts}>\r\n      <div className={incClass.container}>\r\n        <h2 className={incClass.title}>Posts <img className={incClass.cross} onClick={()=> deletePosts()} title=\"Delete Posts\" src=\"https://icon-library.com/images/cross-png-icon/cross-png-icon-3.jpg\" alt=\"cross\"/></h2>\r\n        <PostsForm userData={userData} changeNewPost={changeNewPost} addPosts={addPosts}/>\r\n      </div>\r\n      <div className={incClass.flexReverse}>\r\n        {post === null ? <div>No Comments</div> : post.map((post: PostType) => <Post key={post.id} img={post.img} comment={post.comment} />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Posts","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Profile_title__XHrQy\",\"Profile\":\"Profile_Profile__vfELr\",\"Profile__name\":\"Profile_Profile__name__6aP-v\",\"ProfileTextStyle\":\"Profile_ProfileTextStyle__gTYF9\",\"ProfileTextHeader\":\"Profile_ProfileTextHeader__YAa-t\",\"ContactTitle\":\"Profile_ContactTitle__K1yv-\",\"ProfileJobSearchTitle\":\"Profile_ProfileJobSearchTitle__Zcafd\",\"ProfileMega\":\"Profile_ProfileMega__loabJ\",\"Profile__img\":\"Profile_Profile__img__oRgxk\",\"usedZoomImg\":\"Profile_usedZoomImg__Mm1YW\",\"noUsedZoomImg\":\"Profile_noUsedZoomImg__7Uj+3\",\"selectedPhoto\":\"Profile_selectedPhoto__3+nu7\",\"jobSearchIcon\":\"Profile_jobSearchIcon__kixfC\",\"ContactLink\":\"Profile_ContactLink__S0O9a\",\"ContactLinkHeader\":\"Profile_ContactLinkHeader__CGhpt\",\"changeButton\":\"Profile_changeButton__eXDz2\",\"ProfileJobSearch\":\"Profile_ProfileJobSearch__I32tm\",\"ContactsFormContainer\":\"Profile_ContactsFormContainer__2Ctn5\",\"active\":\"Profile_active__BRuU1\",\"plus\":\"Profile_plus__dy9Cn\",\"minus\":\"Profile_minus__dWi1b\",\"status\":\"Profile_status__pLPfV\",\"penIcon\":\"Profile_penIcon__6kjp2\",\"form\":\"Profile_form__peI+f\",\"statusText\":\"Profile_statusText__O0PyT\"};","import { ProfileType } from '../../../../redux/GlobalTypes';\r\nimport incClass from '../../Profile.module.scss';\r\n\r\nexport const ShowJobMark = (item: ProfileType)=>{\r\n  \r\n    if(item.lookingForAJob === true){\r\n      return <img className={incClass.jobSearchIcon} \r\n      src='https://uxwing.com/wp-content/themes/uxwing/download/48-checkmark-cross/success-green-check-mark.png' alt='Check Mark' />\r\n    } else {\r\n      return <img className={incClass.jobSearchIcon} src='https://img.cppng.com/download/2020-06/5-2-red-cross-mark-download-png.png' alt='Cross' />\r\n    }\r\n}\r\nexport const ShowJobDescription = (item: ProfileType)=>{\r\n    if(item.lookingForAJobDescription === null){\r\n      return \"No Information\"\r\n    } else return item.lookingForAJobDescription\r\n  }\r\nexport const ShowAboutMe = (item: {aboutMe:string|null})=>{\r\n    if(item.aboutMe === null){\r\n      return \"No Information\"\r\n    } else return item.aboutMe\r\n}\r\n","import incClass from '../../Profile.module.scss';\r\nimport { ShowAboutMe, ShowJobDescription, ShowJobMark } from './ProfileContactsHelper';\r\nimport ProfileStatusContainer from \"../ProfileStatus/ProfileStatusContainer\";\r\nimport { ProfileContactsType, ProfileType } from '../../../../redux/GlobalTypes';\r\nimport { ItemType } from './ProfileContactsForm';\r\nimport { dataType } from '../../../../redux/chat-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../../../redux/store-redux';\r\n\r\n\r\ntype Props = {\r\n  userProfile: Array<ProfileType>\r\n  changeMode: boolean\r\n  setChangeMode: (boolean: boolean)=> void\r\n  activeContacts: boolean\r\n  setActiveContacts: (activeContacts: boolean)=> void\r\n  userData: dataType\r\n  activeContactsProps: boolean\r\n  item: ItemType\r\n  ProfileItem: ProfileType\r\n  changeText: boolean\r\n  changeTextFunc: (ref:any)=> void\r\n  addChangeText: ()=> void\r\n  removeChangeText: ()=> void\r\n  updatePhoto: (e:HTMLInputElement)=> void\r\n  getStatus: (id:number)=> void\r\n  updateStatus: (statusText:string|null)=> void\r\n  changeStatus: (ref: any)=> void\r\n  statusText: string\r\n  updateAccountProfile: (values: any) => void\r\n}\r\nconst ProfileContacts:React.FC<Props> = props => {\r\n  const statusText = useSelector((state:AppState)=> state.profilePage.statusText)\r\n  const shortDataProfInfo = props.userProfile.map((item: ProfileType) => {\r\n    return (\r\n      <div key={item.userId}>\r\n        <div className={incClass.Profile__text}>\r\n          <div className={incClass.ProfileInfo}>\r\n          <div className={incClass.Id}> <span className={incClass.ProfileTextHeader}>ID:</span> {props.userProfile[0].userId} </div>\r\n            <div className={incClass.Profile__name}><span className={incClass.ProfileTextHeader}>UserName:</span> {props.userProfile[0].fullName}</div>\r\n            {/* <ProfileStatusContainer removeChangeText={props.removeChangeText} addChangeText={props.addChangeText} changeTextFunc={props.changeTextFunc} changeText={props.changeText} userDataProps={props.userData} itemProps = {item} updateStatus={props.updateStatus} statusText={statusText} statusTextProps = {statusText} getStatus={props.getStatus} item={props.userProfile[0]} /> */}\r\n            <div className={incClass.ProfileTextStyle}>\r\n              <span className={incClass.ProfileTextHeader}>\r\n                AboutMe:\r\n              </span> {ShowAboutMe(item)}\r\n            </div>\r\n            <div className={incClass.ProfileJobSearch}>\r\n              <span className={incClass.ProfileJobSearchTitle}>\r\n                Job Search:\r\n              </span>{ShowJobDescription(item)} {ShowJobMark(item)}\r\n            </div>\r\n            <div onClick={()=> props.setActiveContacts(!props.activeContacts)} \r\n              className={incClass.ContactTitle}>\r\n              <span>Contacts <span>{props.activeContacts === false ? '+' : '-'}</span></span>\r\n            </div> \r\n            {Object.keys(item.contacts).map((key ) => {\r\n              \r\n              return <Contacts key={key as keyof ProfileContactsType}\r\n                contactTitle={key}\r\n                contactValue={item.contacts[key as keyof ProfileContactsType]} activeContacts = {props.activeContacts} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n  return (\r\n    <div>\r\n      {shortDataProfInfo}\r\n    </div>\r\n  )\r\n}\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n  activeContacts: boolean\r\n}\r\ntype ContactsType = (args: ContactsPropsType)=> any\r\nconst Contacts:ContactsType = ({ contactTitle, contactValue, activeContacts }) => {\r\n  return (\r\n    <div className={activeContacts === true ? incClass.ContactsFormContainer : incClass.ContactsFormContainer + ' ' + incClass.active}>\r\n      <span className={incClass.ContactLinkHeader}>{contactTitle}: </span>\r\n      <span>{contactValue}</span>\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileContacts","import React from 'react';\r\nimport incClass from '../../Profile.module.scss';\r\ntype Props = {\r\n    statusTextProps: string\r\n    itemProps: {\r\n        userId: number\r\n        fullName: string\r\n        aboutMe: string | null\r\n    }\r\n    userDataProps:{\r\n        id: number\r\n    }\r\n    changeText: boolean\r\n    changeTextFunc: (ref:any)=> void\r\n    addChangeText: ()=> void\r\n    removeChangeText: ()=> void\r\n}\r\nconst ProfileStatus:React.FC<Props> = (props) => {\r\n    const ref = React.useRef<HTMLInputElement>(null)\r\n    return (\r\n        <div>\r\n            <span className={incClass.status}>Status: </span>\r\n            {props.itemProps.userId === props.userDataProps.id\r\n                ? props.changeText === false\r\n                    ? <span className={incClass.statusText} onDoubleClick={props.addChangeText}>{props.statusTextProps}</span>\r\n                    : <input ref={ref} autoFocus={true} onBlur={props.removeChangeText}\r\n                        onChange={() => {props.changeTextFunc(ref)}} value={props.statusTextProps} />\r\n                : <span>{props.itemProps.aboutMe !== null\r\n                    ? props.itemProps.aboutMe\r\n                    : `Я ${props.itemProps.fullName} и я крут :)`}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatus\r\n","import { actions } from \"../../../../redux/profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { AppState } from \"../../../../redux/store-redux\";\r\nimport { ItemType } from \"../ProfileContacts/ProfileContactsForm\";\r\nimport { dataType } from \"../../../../redux/auth-reducer\";\r\nimport { ProfileType } from \"../../../../redux/GlobalTypes\";\r\ntype Props = {\r\n    // userProfile: Array<ProfileType>\r\n    // activeContactsProps: boolean\r\n    item: ItemType\r\n    // userData: dataType\r\n    // ProfileItem: ProfileType\r\n    // changeText: boolean\r\n    // changeTextFunc: (ref:any)=> void\r\n    // addChangeText: ()=> void\r\n    // removeChangeText: ()=> void\r\n    // updatePhoto: (e:HTMLInputElement)=> void\r\n    getStatus: (id:number)=> void\r\n    updateStatus: (statusText:string|null)=> void\r\n    // changeStatus: (ref: any)=> void\r\n    statusText: string\r\n    // changeMode: boolean\r\n    // setChangeMode: (boolean: boolean)=> void\r\n    // activeContacts: boolean\r\n    // setActiveContacts: (activeContacts: boolean)=> void\r\n    // updateAccountProfile: (values: any) => void\r\n    statusTextProps: string\r\n    itemProps: ItemType\r\n    userDataProps: dataType\r\n    changeText: boolean\r\n    changeTextFunc: (ref:any)=> void\r\n    addChangeText: ()=> void\r\n    removeChangeText: ()=> void\r\n}\r\nconst ProfileStatusContainer:React.FC<Props> = props =>{\r\n    const [changeText, setChangeText] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const changeStatus = (newStatus: string)=> dispatch(actions.changeStatus(newStatus))\r\n    useEffect(()=>{\r\n        props.getStatus(props.userDataProps.id)\r\n    }, [props.userDataProps.id])\r\n    const addChangeText = ()=> setChangeText(true)\r\n    const removeChangeText = ()=>{\r\n        setChangeText(false)\r\n        props.updateStatus(props.statusText)\r\n    }\r\n    const changeTextFunc = (ref:any)=>{\r\n        changeStatus(ref.current.value)\r\n    }\r\n    return(\r\n        <ProfileStatus statusTextProps = {props.statusText} itemProps = {props.item} userDataProps = {props.userDataProps} addChangeText={addChangeText} removeChangeText={removeChangeText}\r\n                       changeTextFunc={changeTextFunc} changeText={changeText}/>\r\n    )\r\n}\r\nexport default ProfileStatusContainer","import { Form, Field, Formik, ErrorMessage } from \"formik\"\r\nimport { createField, Input } from \"../../../../Forms/Forms\";\r\nimport { dataType } from \"../../../../redux/auth-reducer\";\r\nimport { ProfileContactsType, ProfileType } from \"../../../../redux/GlobalTypes\";\r\nimport { validateProfile } from \"../../../../validate/validate\";\r\nimport incClass from '../../../Profile/Posts/Posts.module.scss'\r\nimport classProfile from '../../Profile.module.scss';\r\nimport ProfileStatusContainer from \"../ProfileStatus/ProfileStatusContainer\";\r\ntype Props = {\r\n    statusText: string\r\n    activeContacts: boolean\r\n    item: ItemType\r\n    userData: dataType\r\n    userProfile: Array<ProfileType>\r\n    activeContactsProps: boolean\r\n    ProfileItem: ProfileType\r\n    changeText: boolean\r\n    changeMode: boolean\r\n    itemProfile: any\r\n    addChangeText: ()=> void\r\n    removeChangeText: ()=> void\r\n    updatePhoto: (e:HTMLInputElement)=> void\r\n    changeTextFunc: (ref:any)=> void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (statusText: string|null) => void\r\n    updateAccountProfile: (values: any) => void\r\n    setActiveContacts: (boolean: boolean) => void\r\n    setChangeMode: (boolean: boolean) => void\r\n}\r\nexport type ItemType = {\r\n    aboutMe: string\r\n    contacts: ProfileContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: PhotosType\r\n    userId: number\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n} | string\r\ntype RequestValuesType = ItemType\r\ntype RequestValuesKeysType = keyof RequestValuesType\r\nconst ProfileContactsForm: React.FC<Props> = (props) => {\r\n    const validateProfileHelper = validateProfile(props.itemProfile)\r\n    return <Formik initialValues={{ ...props.userProfile[0], someUrlIsWrong: \"\" }}\r\n        // validate={validateProfileHelper}\r\n        onSubmit={async (values:RequestValuesType) => {\r\n            await props.updateAccountProfile(values)\r\n            props.setChangeMode(false)\r\n        }}>\r\n        <div key={props.itemProfile.userId}>\r\n            <div className={incClass.Profile__text}>\r\n                <div className={incClass.ProfileInfo}>\r\n                    <div className={incClass.ProfileTextStyle}>\r\n                        <Form>\r\n                            <div className={classProfile.Id}>\r\n                                <span className={classProfile.ProfileTextHeader}>ID:</span>\r\n                                {props.userProfile[0].userId}\r\n                            </div>\r\n                            <div className={classProfile.Profile__name}>\r\n                                <span className={classProfile.ProfileTextHeader}>UserName:</span>\r\n                                {createField<RequestValuesKeysType>(classProfile.form, \"fullName\", Input, \"FullName\")}\r\n                            </div>\r\n                            <div className={classProfile.Profile__name}>\r\n                                {/* <ProfileStatusContainer {...props} item={props.userProfile[0]} /> */}\r\n                                <ProfileStatusContainer removeChangeText={props.removeChangeText} addChangeText={props.addChangeText} changeTextFunc={props.changeTextFunc} changeText={props.changeText} userDataProps={props.userData} itemProps = {props.item} updateStatus={props.updateStatus} statusText={props.statusText} statusTextProps = {props.statusText} getStatus={props.getStatus} item={props.userProfile[0]} />\r\n                            </div>\r\n                            <div className={classProfile.ProfileTextStyle}>\r\n                                <span className={classProfile.ProfileTextHeader}>\r\n                                    AboutMe:\r\n                                </span> {createField<RequestValuesKeysType>(classProfile.form, \"aboutMe\", Input, \"AboutMe\")}\r\n                            </div>\r\n                            <div>\r\n                                <div className={classProfile.ProfileJobSearch}>\r\n                                    <span className={classProfile.ProfileJobSearchTitle}>Job Search:</span>\r\n                                    {createField<RequestValuesKeysType>(classProfile.form, \"lookingForAJob\", Input, \"LookingForAJob\", \"checkbox\")}\r\n                                    {createField<RequestValuesKeysType>(classProfile.form, \"lookingForAJobDescription\", Input, \"LookingForAJobDescription\")}\r\n                                </div>\r\n                            </div>\r\n                            <ErrorMessage className={incClass.errorLogin} name=\"someUrlIsWrong\" component={'div'} />\r\n                            <div onClick={() => props.setActiveContacts(!props.activeContacts)}\r\n                                className={classProfile.ProfileTextHeader}>\r\n                                <span>Contacts <span>{props.activeContacts === false ? '+' : '-'}</span></span>\r\n                            </div>\r\n                            {Object.keys(props.userProfile[0].contacts).map(key => {\r\n                                return <Contacts key={key}\r\n                                    contactTitle={'contacts.' + key} contactValue={key} activeContacts={props.activeContacts} />\r\n                            })}\r\n                            <button className={classProfile.changeButton} type=\"submit\">GO FORM</button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </Formik>\r\n}\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n    activeContacts: boolean\r\n}\r\n\r\nconst Contacts = ({ contactTitle, contactValue, activeContacts }: ContactsType) => {\r\n    type contactTitleKey = typeof contactTitle\r\n    return <div className={activeContacts === true ? classProfile.ContactsFormContainer : classProfile.ContactsFormContainer + ' ' + classProfile.active}>\r\n        <span className={classProfile.ContactLinkHeader}>{contactValue}: </span>\r\n        {createField<contactTitleKey>(classProfile.form, contactTitle, Input, contactValue)}\r\n    </div>\r\n}\r\nexport default ProfileContactsForm","import { ChangeEvent } from 'react';\r\nimport incClass from '.././Profile.module.scss';\r\nconst noPhoto =\r\n  'https://images.theconversation.com/files/449089/original/file-20220301-25-ckck4y.jpeg?ixlib=rb-1.1.0&q=45&auto=format&w=1200&h=1200.0&fit=crop'\r\n\r\nexport  const NoPhoto = (smallPhoto: any) => {\r\n    if (smallPhoto === null) {\r\n      return noPhoto\r\n    } else {\r\n      return smallPhoto\r\n    }\r\n}\r\ntype MyProfileProps = {\r\n  selectedPhoto: (e: ChangeEvent<HTMLInputElement>)=> void \r\n}\r\nexport const MyProfile:React.FC<MyProfileProps> = (props: any) => {\r\n  if (props.isMyProfile === true) {\r\n    return <input className={incClass.selectedPhoto} type='file' onChange={props.selectedPhoto} />\r\n  }\r\n  return <div></div>\r\n}\r\n// export const ButtonChange = (props: {userData:dataType, userProfile: [ProfileType]}, func:Function)=>{\r\nexport const ButtonChange = (props: any, func:Function)=>{\r\n  if(props.userData.id === props.userProfile[0].userId){\r\n    return <button className={incClass.changeButton} onClick={() => func(true)}>CHANGE</button>\r\n  }\r\n}","import { ChangeEvent, useState } from 'react';\r\nimport incClass from '.././Profile.module.scss';\r\n//@ts-ignore\r\nimport ProfileContacts from './ProfileContacts/ProfileContacts';\r\n//@ts-ignore\r\nimport ProfileContactsForm, { ItemType } from './ProfileContacts/ProfileContactsForm';\r\n\r\nimport { ButtonChange, MyProfile, NoPhoto } from './ProfileInfoHelper';\r\n\r\nimport ProfileStatusContainer from './ProfileStatus/ProfileStatusContainer';\r\nimport cn from 'classnames'\r\nimport { dataType } from '../../../redux/auth-reducer';\r\nimport { ProfileType } from '../../../redux/GlobalTypes';\r\n\r\ntype Props = {\r\n  userProfile: Array<ProfileType>\r\n  statusText: string\r\n  activeContactsProps: boolean\r\n  userData: dataType\r\n  ProfileItem: ProfileType\r\n  changeText: boolean\r\n  changeTextFunc: (ref: React.RefObject<HTMLInputElement>) => void\r\n  addChangeText: () => void\r\n  removeChangeText: () => void\r\n  updatePhoto: (e: HTMLInputElement) => void\r\n  getStatus: (id: number) => void\r\n  updateStatus: (statusText: string | null) => void\r\n  changeStatus: (ref: React.RefObject<HTMLInputElement>) => void\r\n  updateAccountProfile: (values: any) => void\r\n  item: ItemType\r\n}\r\n\r\nconst ProfileInfo: React.FC<Props> = (props) => {\r\n  const [useZoom, setUseZoom] = useState(false)\r\n  const [changeMode, setChangeMode] = useState(false)\r\n  const [activeContacts, setActiveContacts] = useState(false)\r\n  const imgZoomClass = cn(\r\n    { [incClass.usedZoomImg]: useZoom === true },\r\n    { [incClass.noUsedZoomImg]: useZoom === false }\r\n  )\r\n  const selectedPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if(e.target.files?.length){\r\n       //@ts-ignore\r\n      props.updatePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  const SelectChangeMode = () => {\r\n    if (changeMode === false) {\r\n      return (\r\n        <div>\r\n          <ProfileContacts changeMode={changeMode} setChangeMode={setChangeMode}\r\n            activeContacts={activeContacts} setActiveContacts={setActiveContacts}\r\n            {...props} />\r\n          {ButtonChange(props, setChangeMode)}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ProfileContactsForm\r\n            itemProfile={props.userProfile[0]} setChangeMode={setChangeMode}\r\n            changeMode={changeMode}\r\n            {...props}\r\n            activeContacts={activeContacts} setActiveContacts={setActiveContacts} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  if (props.userProfile.length === 0) return <div>Profile Loading...</div>\r\n  return (\r\n    <div>\r\n      <div key={props.userProfile[0].userId}>\r\n        <div className={incClass.Profile}>\r\n          <div className={incClass.Profile__img}>\r\n            <img className={imgZoomClass}\r\n              onPointerLeave={() => setUseZoom(false)} onClick={() => setUseZoom(true)}\r\n              src={NoPhoto(props.userProfile[0].photos.small)} alt='profilePhoto' />\r\n            <ProfileStatusContainer removeChangeText={props.removeChangeText} addChangeText={props.addChangeText} changeTextFunc={props.changeTextFunc} changeText={props.changeText} userDataProps={props.userData} itemProps = {props.item} updateStatus={props.updateStatus} statusText={props.statusText} statusTextProps = {props.statusText} getStatus={props.getStatus} item={props.userProfile[0]} />\r\n            <MyProfile {...props}\r\n              selectedPhoto={selectedPhoto} />\r\n          </div>\r\n          <div className={incClass.Profile__text}>\r\n            <div className={incClass.ProfileInfo}>\r\n              <SelectChangeMode />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo","\r\nimport { Breadcrumb, Col } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n//@ts-ignore\r\nimport { ProfileType } from '../../api/api-dal';\r\nimport AnonimGoLogin from '../../noc/hoc';\r\nimport { dataType } from '../../redux/auth-reducer';\r\nimport { getMyUserProfile } from '../../redux/profile-reselects';\r\nimport Posts from './Posts/Posts';\r\nimport incClass from './Profile.module.scss';\r\nimport { ItemType } from './ProfileInfo/ProfileContacts/ProfileContactsForm';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\ntype Props = {\r\n  statusText: string\r\n  activeContactsProps: boolean\r\n  ProfileItem: ProfileType\r\n  userData: dataType\r\n  changeText: boolean\r\n  updateAccountProfile: (values: any) => void\r\n  changeTextFunc: (ref: any) => void\r\n  addChangeText: () => void\r\n  removeChangeText: () => void\r\n  getStatus: (id: number) => void\r\n  updateStatus: (statusText: string | null) => void\r\n  changeStatus: (ref: any) => void\r\n  updatePhoto: () => void\r\n  changeMode: boolean\r\n  setChangeMode: (boolean: boolean)=> void\r\n  activeContacts: boolean\r\n  setActiveContacts: (activeContacts: boolean)=> void\r\n  item: ItemType\r\n}\r\nlet Profile: React.FC<Props> = props => {\r\n  const userProfile = useSelector(getMyUserProfile)\r\n  return (\r\n    <Col span={20}> \r\n    <main className={incClass.main}>\r\n      <Breadcrumb style={{ margin: '16px 0', }}>\r\n        <Breadcrumb.Item>Start</Breadcrumb.Item>\r\n        <Breadcrumb.Item>ProfilePage</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Profile</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className={incClass.container}>\r\n        <ProfileInfo {...props} userProfile = {userProfile}/>\r\n      </div>\r\n      <Posts />\r\n    </main>\r\n    </Col>\r\n  )\r\n}\r\nconst LoginProfileContainer = AnonimGoLogin(Profile);\r\nexport default LoginProfileContainer","import { JSXElementConstructor } from 'react'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\n\r\nconst WithRouters = (WrapperComponent:JSXElementConstructor<[]>) => {\r\n    const ComponentWithRouterProp = (props: any) => {\r\n        const location = useLocation()\r\n        const navigate = useNavigate()\r\n        const params = useParams()\r\n        return <WrapperComponent {...props} router={{ location, navigate, params }} />\r\n    }\r\n    return ComponentWithRouterProp\r\n}\r\nexport default WithRouters","import Profile from './Profile';\r\nimport React, { useEffect } from 'react';\r\nimport { updatePhoto, getStatus, updateStatus, updateAccountProfile, actions } from '../../redux/profile-reducer'\r\nimport { connect, useSelector } from 'react-redux';\r\nimport AnonimGoLogin from '../../noc/hoc'\r\nimport { compose } from 'redux';\r\nimport { getMyUserProfile } from '../../redux/profile-reselects';\r\nimport WithRouters from '../../WithRouter';\r\nimport { AppState } from '../../redux/store-redux';\r\nimport { OldURL } from '../../noc/oldURL';\r\nimport { ProfileApi } from '../../api/profile-api';\r\ntype Props = {\r\n    router: any\r\n    actions: any\r\n    updateAccountProfile: () => void\r\n    updatePhoto: () => void\r\n    updateProfile: (data: any) => void\r\n    getStatus: () => void\r\n    updateStatus: () => void\r\n}\r\nconst ProfileContainer: React.FC<Props> = (props) => {\r\n    const userProfile = useSelector(getMyUserProfile)\r\n    const userData = useSelector((state:AppState)=> state.auth)\r\n    const statusText = useSelector((state:AppState)=> state.profilePage.statusText)\r\n    let userId = props.router.params.userId\r\n    const getProfileHelper = () => {\r\n        ProfileApi.getProfile(userId).then(data => {\r\n            return props.updateProfile(data)\r\n        }\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        if (!userId) userId = userData.id\r\n        getProfileHelper()\r\n    }, [userId])\r\n    //@ts-ignore\r\n    return <Profile userProfile = {userProfile}\r\n     userData = {userData} statusText = {statusText} isMyProfile={!props.router.params.userId} {...props} />\r\n}\r\nexport default compose(\r\n    connect(null, { updateAccountProfile, updatePhoto, getStatus, updateStatus, updateProfile: actions.updateProfile }),\r\n    WithRouters,\r\n    AnonimGoLogin,\r\n    OldURL\r\n)(ProfileContainer)","import { ProfileContactsType } from \"../redux/GlobalTypes\"\r\n\r\ntype validateType<T> = (values: T) => {}\r\n\r\ntype validatePostType = {\r\n  newPost: string\r\n}\r\ntype errorsPostType = {\r\n  newPost?: string\r\n}\r\n\r\nexport const validatePost:validateType<validatePostType> = (values) => {\r\n  const errors: errorsPostType = {};\r\n  if (!values.newPost) {\r\n    errors.newPost = 'error!';\r\n  } else if (values.newPost.length > 50) {\r\n    errors.newPost = 'Must be 50 characters or less!';\r\n  }\r\n  return errors;\r\n};\r\n\r\ntype validateLoginType = {\r\n  captcha: string\r\n  login: string\r\n  passoword: string\r\n  remebmerMe: boolean\r\n}\r\ntype errorsLoginType = {\r\n  login?: string\r\n  passoword?: string\r\n}\r\nexport const validateLogin: validateType<validateLoginType> = (values) => {\r\n  const errors: errorsLoginType = {};\r\n  if (!values.login) {\r\n    errors.login = 'Login Request!';\r\n  } else if (values.login.length > 30) {\r\n    errors.login = 'Must be 30 characters or less';\r\n  }\r\n\r\n  if (!values.passoword) {\r\n    errors.passoword = 'Password Request!';\r\n  } else if (values.passoword.length > 20) {\r\n    errors.passoword = 'Must be 20 characters or less';\r\n  }\r\n\r\n  return errors;\r\n};\r\ntype validateProfileType = {\r\n  aboutMe: string\r\n  fullName: string\r\n  lookingForAJobDescription: string\r\n  contacts: ProfileContactsType\r\n}\r\ntype errorsProfileType = {\r\n  aboutMe?: string\r\n  fullName?: string\r\n  lookingForAJobDescription?: string\r\n  someUrlIsWrong?: string\r\n}\r\nexport const validateProfile:validateType<validateProfileType> =  (values) => {\r\n  const errors: errorsProfileType = {};\r\n  if (values.aboutMe.length > 65) {\r\n    errors.aboutMe = 'Must be 65 characters or less';\r\n  }\r\n  if (values.fullName.length > 30) {\r\n    errors.fullName = 'Must be 30 characters or less';\r\n  }\r\n  if (values.lookingForAJobDescription.length > 50) {\r\n    errors.lookingForAJobDescription = 'Must be 50 characters or less';\r\n  }\r\n  const bigURL = Object.values(values.contacts).filter((item: any) => item.length > 50)\r\n  if (bigURL.length > 0) {\r\n    errors.someUrlIsWrong = `Some URL (${bigURL}) Is Wrong`\r\n  }\r\n\r\n  return errors;\r\n};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function () {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};"],"names":["WrappedComponent","connect","state","isAuth","auth","props","to","getMyUserProfile","createSelector","profilePage","profile","myProfile","className","src","img","alt","comment","initialValues","newPost","validate","validatePost","onSubmit","values","changeNewPost","addPosts","userData","photo","createField","incClass","Textarea","type","post","useSelector","dispatch","useDispatch","deletePosts","actions","localStorage","setItem","JSON","stringify","onClick","title","text","avatar","map","id","ShowJobMark","item","lookingForAJob","ShowJobDescription","lookingForAJobDescription","ShowAboutMe","aboutMe","Contacts","contactTitle","contactValue","activeContacts","statusText","shortDataProfInfo","userProfile","userId","fullName","setActiveContacts","Object","keys","contacts","key","ref","React","itemProps","userDataProps","changeText","onDoubleClick","addChangeText","statusTextProps","autoFocus","onBlur","removeChangeText","onChange","changeTextFunc","value","useState","setChangeText","useEffect","getStatus","updateStatus","newStatus","current","classProfile","Input","validateProfile","itemProfile","someUrlIsWrong","updateAccountProfile","setChangeMode","name","component","MyProfile","isMyProfile","selectedPhoto","ButtonChange","func","smallPhoto","useZoom","setUseZoom","changeMode","imgZoomClass","cn","SelectChangeMode","length","onPointerLeave","photos","small","e","target","files","updatePhoto","AnonimGoLogin","span","style","margin","WrapperComponent","location","useLocation","navigate","useNavigate","params","useParams","router","compose","updateProfile","WithRouters","OldURL","ProfileApi","then","data","errors","validateLogin","login","passoword","bigURL","filter","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","i","createCacheKeyComparator","cache","equals","entry","get","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","push","assign","lastResult","recomputations","resetRecomputations"],"sourceRoot":""}