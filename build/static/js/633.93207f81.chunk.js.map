{"version":3,"file":"static/js/633.93207f81.chunk.js","mappings":"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","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","validate/validate.ts"],"sourcesContent":["import { Form, Field, Formik } from \"formik\"\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { createField, Input } from \"../../Forms/Forms\";\r\nimport { dataType } from \"../../redux/auth-reducer\";\r\nimport { validateLogin } from \"../../validate/validate\";\r\nimport incClass from '../Profile/Posts/Posts.module.scss';\r\nimport c from './Login.module.scss';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { actions } from \"../../redux/auth-reducer\";\r\nimport { AppState } from \"../../redux/store-redux\";\r\nimport { getCaptcha } from \"../../redux/auth-reducer\";\r\nimport { Button } from \"antd\";\r\nimport { AuthApi } from \"../../api/auth-api\";\r\n\r\nexport type FormValues = {\r\n    login: string,\r\n    passoword: string,\r\n    captcha: string,\r\n    remebmerMe: boolean\r\n}\r\ntype FormValuesKeys = keyof FormValues\r\nconst LoginForm:React.FC = (props) => {\r\n    const userData = useSelector((state:AppState)=> state.auth)\r\n    const error = useSelector((state:AppState)=> state.auth.error)\r\n    const captcha = useSelector((state:AppState)=> state.auth.captcha)\r\n    const dispatch = useDispatch()\r\n    const setError = (error: string | null)=> dispatch(actions.setError(error))\r\n    //@ts-ignore\r\n    const getCaptchaFunc = ()=> dispatch(getCaptcha())\r\n    const deleteError = () => setError(null);\r\n    const initialValues: FormValues = {\r\n        login: '',\r\n        passoword: '',\r\n        captcha: '',\r\n        remebmerMe: false\r\n    }\r\n    if (userData.email != null && userData.login != null) {\r\n        return <Navigate to={'/profile'} />\r\n    }\r\n    return <Formik initialValues={initialValues}\r\n        validate={validateLogin}\r\n        onSubmit={async values => {\r\n            const data = await AuthApi.loginService(values.login, values.passoword, values.remebmerMe, values.captcha)\r\n            if (data.resultCode === 0) {\r\n                window.location.reload()\r\n            }\r\n            else {\r\n                if (data.resultCode === 10) {\r\n                    getCaptchaFunc()\r\n                }\r\n                setError(data.messages[0]);\r\n            }\r\n        }}>\r\n        <Form>\r\n            <div>\r\n                {createField<FormValuesKeys>(c.loginInputForm, 'login', Input, \"Email\")}\r\n            </div>\r\n            <div>\r\n                {createField<FormValuesKeys>(c.loginInputForm, 'passoword', Input, \"Password\")}\r\n            </div>\r\n            <div>\r\n                <label className={c.rememberMeForm}>\r\n                    RememberMe? {createField<FormValuesKeys>(undefined, 'remebmerMe', Input, undefined, \"checkbox\")}\r\n                </label>\r\n            </div>\r\n            <div>\r\n                {captcha !== null\r\n                    ?\r\n                    <div className={incClass.captchaContainer}>\r\n                        {createField<FormValuesKeys>(c.loginInputForm, 'captcha', Input, \"Captcha\")}\r\n                        <img className={c.captchaImg} src={captcha} alt=\"Captcha\" />\r\n                    </div>\r\n                    :\r\n                    \"\"\r\n                }\r\n                <Button type='primary' htmlType=\"submit\" style={{backgroundColor: '#0077ff', width: '100%', borderRadius: '8px', marginBottom: '12px' }} className={c.sendButton} onBlur={deleteError}>LogIn</Button>\r\n                {error === null ? \"\" : <div className={incClass.errorLogin}>{error}</div>}\r\n            </div>\r\n        </Form>\r\n    </Formik>\r\n}\r\nexport default LoginForm","import LoginForm from \"./LoginForm\";\r\nimport c from \"./Login.module.scss\";\r\nconst Login:React.FC = props => {\r\n\r\n    return <div className={c.ShieldWrapper}>\r\n        <div className={c.wrapper}>\r\n        <img alt=\"logo\" />\r\n        <h2 className={c.title}><div style={{letterSpacing: \"2px\"}}>Enter</div> <div style={{fontWeight: 'bold'}}>Your</div> <div>Email & Password</div></h2>\r\n        <LoginForm />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Login","import { ProfileContactsType } from \"../redux/GlobalTypes\"\r\n\r\ntype validateType<T> = (values: T) => {}\r\n\r\ntype validatePostType = {\r\n  newPost: string\r\n}\r\ntype errorsPostType = {\r\n  newPost?: string\r\n}\r\n\r\nexport const validatePost:validateType<validatePostType> = (values) => {\r\n  const errors: errorsPostType = {};\r\n  if (!values.newPost) {\r\n    errors.newPost = 'error!';\r\n  } else if (values.newPost.length > 50) {\r\n    errors.newPost = 'Must be 50 characters or less!';\r\n  }\r\n  return errors;\r\n};\r\n\r\ntype validateLoginType = {\r\n  captcha: string\r\n  login: string\r\n  passoword: string\r\n  remebmerMe: boolean\r\n}\r\ntype errorsLoginType = {\r\n  login?: string\r\n  passoword?: string\r\n}\r\nexport const validateLogin: validateType<validateLoginType> = (values) => {\r\n  const errors: errorsLoginType = {};\r\n  if (!values.login) {\r\n    errors.login = 'Login Request!';\r\n  } else if (values.login.length > 30) {\r\n    errors.login = 'Must be 30 characters or less';\r\n  }\r\n\r\n  if (!values.passoword) {\r\n    errors.passoword = 'Password Request!';\r\n  } else if (values.passoword.length > 20) {\r\n    errors.passoword = 'Must be 20 characters or less';\r\n  }\r\n\r\n  return errors;\r\n};\r\ntype validateProfileType = {\r\n  aboutMe: string\r\n  fullName: string\r\n  lookingForAJobDescription: string\r\n  contacts: ProfileContactsType\r\n}\r\ntype errorsProfileType = {\r\n  aboutMe?: string\r\n  fullName?: string\r\n  lookingForAJobDescription?: string\r\n  someUrlIsWrong?: string\r\n}\r\nexport const validateProfile:validateType<validateProfileType> =  (values) => {\r\n  const errors: errorsProfileType = {};\r\n  if (values.aboutMe.length > 65) {\r\n    errors.aboutMe = 'Must be 65 characters or less';\r\n  }\r\n  if (values.fullName.length > 30) {\r\n    errors.fullName = 'Must be 30 characters or less';\r\n  }\r\n  if (values.lookingForAJobDescription.length > 50) {\r\n    errors.lookingForAJobDescription = 'Must be 50 characters or less';\r\n  }\r\n  const bigURL = Object.values(values.contacts).filter((item: any) => item.length > 50)\r\n  if (bigURL.length > 0) {\r\n    errors.someUrlIsWrong = `Some URL (${bigURL}) Is Wrong`\r\n  }\r\n\r\n  return errors;\r\n};"],"names":["props","userData","useSelector","state","auth","error","captcha","dispatch","useDispatch","setError","actions","email","login","to","initialValues","passoword","remebmerMe","validate","validateLogin","onSubmit","values","AuthApi","data","resultCode","window","location","reload","getCaptcha","messages","createField","c","Input","className","undefined","incClass","src","alt","type","htmlType","style","backgroundColor","width","borderRadius","marginBottom","onBlur","letterSpacing","fontWeight","validatePost","errors","newPost","length","validateProfile","aboutMe","fullName","lookingForAJobDescription","bigURL","Object","contacts","filter","item","someUrlIsWrong"],"sourceRoot":""}